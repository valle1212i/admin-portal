const mongoose = require("mongoose");

// ‚úÖ S√§kerst√§ll att URI finns
if (!process.env.CUSTOMER_DB_URI) {
  throw new Error("‚ùå CUSTOMER_DB_URI √§r inte definierad i milj√∂variablerna.");
}

// üåê Egen anslutning till kunddatabas
const customerConnection = mongoose.createConnection(process.env.CUSTOMER_DB_URI, {
  dbName: "kundportal",
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// üß± Schema med supportHistory inb√§ddat
const CustomerSchema = new mongoose.Schema({
  // Till√•t andra f√§lt ocks√•
  supportHistory: [
    {
      topic: String,
      date: Date,
      status: String
    }
  ],
  // Package Management Fields
  package: { 
    type: String, 
    enum: ['Bas', 'Grower', 'Enterprise'], 
    default: 'Bas' 
  },
  packageChangeRequests: [{
    requestedPackage: String,
    requestedBy: String,
    requestedAt: Date,
    approvedBy: String,
    approvedAt: Date,
    status: { type: String, enum: ['pending', 'approved', 'rejected'], default: 'pending' },
    effectiveDate: { type: String, enum: ['immediate', 'next_billing'] }
  }],
  maxUsers: { type: Number, default: 2 },
  currentUserCount: { type: Number, default: 1 },
  // Agreement Status Fields
  agreementStatus: { 
    type: String, 
    enum: ['active', 'terminated', 'read_only'], 
    default: 'active' 
  },
  terminationDate: Date,
  terminationEffectiveDate: Date,
  terminationReason: String,
  dataRetentionUntil: Date,
  billingCycleEnd: Date
}, { strict: false }); // ‚¨ÖÔ∏è G√∂r att andra f√§lt till√•ts ut√∂ver supportHistory

// üßç Modell baserad p√• "customers"-collection
const Customer = customerConnection.model("Customer", CustomerSchema, "customers");

module.exports = Customer;
